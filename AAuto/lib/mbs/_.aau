namespace mbs;
	
var p2s = ..raw.tostring;
var push = ..table.push;

::Msvcrt = ..raw.loadDll("Msvcrt.dll")
span  = Msvcrt.api("_mbsspn","INT(STR s,STR charset)" ,"cdecl");
cspan  = Msvcrt.api("_mbscspn","INT(STR s,STR charset)" ,"cdecl"); 
reverse =  Msvcrt.api("_mbsrev","void(STR& s)" ,"cdecl");

trimright = function(s,set){
	if(!set) set="\t\n\r\0\v\xA1\xA1"; 
	var pl = span(reverse(s),set); 
	return pl == 0 ? s : ..string.left(s,-( pl  + 1 ));
}
trimleft = function(s,set){
	if(!set) set="\t\n\r\0\v\xA1\xA1"; 
	var pl = span(s,set); 
	return pl == 0 ? s : ..string.right(s,-( pl  + 1 ));
}
 
trim = function(s,set){
	if(!set) set="\t\n\r\0\v\xA1\xA1"; 
	var pr = span(reverse(s),set); 	
	var pl = span(s,set); 
	return (pr || pl) ? ..string.sub(s,pl+1,-( pr  + 1 ) ) : s;
}

_mbstok  = Msvcrt.api("_mbstok","str(pointer s,STR delimit)" ,"cdecl")
tokenize = function(s,delimit){
	if(!s) error("参数@1错误")
	if(!delimit) delimit="\t\n\r\0\v\xA1\xA1";
	
	s = ..raw.malloc(#s+1,s);
	var tok;
	return function(  _,delimit2 /*允许重新指定分隔符*/){ 
		if(tok) return _mbstok( ,delimit2 or delimit) 
		tok = _mbstok(s,delimit) 
		return tok;
	} 
} 

replace = function(s,f,n){
	return ..string.replace(s,"@@"+f,n);
}

_mbspbrk  = Msvcrt.api("_mbspbrk","pointer(STR s,STR charset)" ,"cdecl");

breakAny = function(s,set){
	var p = _mbspbrk(s,set);
	if(p) return p2s(p);
}

indexAny = function(s,set){
	var p = _mbspbrk(s,set);
	if(p){ 
		var r = ..raw.convert( {pointer s = s;pointer d = p},{addr s;addr d});
		return r.d - r.s + 1; 
	}
}

lastIndexAny = function(str,set){
	var idx = indexAny( reverse(str),set); 
	if( idx ) return #str - idx +1; 
}

split = function(str,sep,limit){ 
	if(!sep) sep =' \t\n\r\0\v\xA1\xA1';
	  
	var p;
	var s  = _mbspbrk(str,sep)
	var arr = { ..raw.convert( {pointer s = str},{pointer p}).p };
	var sparr = {};
	var sp;
	while(s){ 
		sp = span(s,sep);
		s = topointer(s,sp);
		
		push( sparr, sp );   
		push( arr, s ); 
	 	s = _mbspbrk( s,sep); 
	}

	if( limit && #arr ){
		if( limit < 0 ){
			var tail = p2s( arr[#arr ]  ); 
			if(! #tail ) {
				 limit--;
			}
			
			limit = #arr + limit - 1;
			if( limit > 0 ){
				..table.splice(arr,2,limit );
				..table.splice(sparr,1,limit ); 
			}
		}
		else { 
			if( arr[2] && ( tonumber(arr[2])-tonumber(arr[1]) - sparr[1] == 0 ) ){
				..table.remove(arr,1);
				..table.remove(sparr,1);
			}
			
			limit = #arr - limit - 1;
			if( limit > 0 ) {
				..table.pop(arr,limit);	
				..table.pop(sparr,limit);	
			}
		} 
	}

	for( i=1;#arr-1 ){ 
		arr[i] = p2s(arr[i], 1,tonumber(arr[i+1])-tonumber(arr[i]) - sparr[i] )  
	}
	if( #arr ){
		var tail = p2s( arr[#arr ]  );
		arr[#arr ] = tail?tail:null;
	}
	
	return arr; 
} 

indexOf = ..string.indexOf;
eachIndexOf = function(s,p){
	var i,j  = 0,0;
	return function(){ 
		i,j = indexOf(s,p,j+1); 
		return i,j
	};
};
lastIndexOf = function(s,p){
	var a,b;
	for i,j in gfind(s,p){
		a,b = i,j;
	};
	return a,b;
};

/**intellisense(mbs)
reverse(.("字符串") = 反转字符串
replace(.("字符串","查找字符串","替换字符串") = 替换 
tokenize("字符串","分隔符") = @for(tok in mbs.tokenize(,"__/*分隔符,默认为空白字符*/")){
	..io.print( tok );
}
span(.("字符串","查找字符集") = 返回字符串开始在指定字符集中的字符所占字节长度
cspan(.("字符串","字符补集") = 查找字符补集组成的开始标记长度- complement span\n即所有不在指定字符集中的字符所占字节长度
trimright(.("字符串","字符集") = 清除尾部在指定字符集中的字符,\n参数2可选,默认为空白字符
trimleft(.("字符串","字符集") = 清除头部在指定字符集中的字符,\n参数2可选,默认为空白字符
trim(.("字符串","字符集") = 清除头尾在指定字符集中的字符,\n参数2可选,默认为空白字符
breakAny(.("字符串","查找字符集") = 查找字符集中任意字符开始的字符串,\n参数2默认为空白字符
indexAny(.("字符串","查找字符集") = 查找字符集中任意字符出现位置
lastIndexAny(.("字符串","查找字符集") = 自后向前查找字符集中任意字符出现位置
indexOf(.(字符串,查找文本) = 查找匹配文本\n不支持模式语法
lastIndexOf(.(字符串,查找文本) = 在字符串尾部查找匹配文本\n不支持模式语法
eachIndexOf(字符串,查找文本) = @for i,j in mbs.eachIndexOf(str,"__/*查找文本*/"){
	
} 
split(.("字符串","分隔符",拆分次数) = 拆分为数组,\n分隔符为可选参数，默认为空白字符\n拆分次数为可选参数,负数指定最后拆分次数,其他分组保持不变
end intellisense**/