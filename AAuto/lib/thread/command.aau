//command 线程命令
import win.ui;
import thread.table;
namespace thread;

class command{ 
	ctor( winform ){  
		if(!winform){
			winform = ..win.form( {} );
			winform.messageOnly();
		}
		this._form = winform;
		this._commands = {};
		
		if( winform.__onThreadCommand ){
			error("目标窗口已绑定线程命令,禁止重复绑定!",2)
		}
		
		winform.__onThreadCommand  = function( cmdId ){
        	return receive( this._commands,cmdId);
		}
		
		..table.gc(this,function(){
			for(name in this._commands ){
				 this[name] = null;
			} 
		});
	};
	subscribe = function(k,f){
		if( type(f) != "function" ) error("参数@2必须是函数对象",2);
		if( type(k) != "string" ) error("参数@1必须是字符串",2);
		
		var list = this._commands[k];
		var tl = type(list);
		if( tl= "function"){
			list = {list};
		}
		elseif( tl != "table") {
			list = {};
		}
		
		if( ..table.find(list,f) ) return;
		..table.push(list,f);
		 
		this[k] = f;
		this._commands[k] = list;
		return;	
	};
	unsubscribe = function(k,f){
		if( type(f) != "function" ) error("参数@2必须是函数对象",2);
		if( type(k) != "string" ) error("参数@1必须是字符串",2);
		var list = this._commands[k];
		var tl = type(list);
		if( tl == "table") { 
			var idx = ..table.find(list,f)  
			if(idx ) ..table.remove(list,idx ); 
		}
		else if( list == f ){
			this[k] = null;
		} 
	};
	@_meta;
}
 
namespace command {  
	var commandTable = ..thread.table("{3EA9E65D-B101-42AF-93D7-08522F8841CD}")
 	
 	_meta = {
		_set = function(k,v){
			commandTable.setByNamespace("subscribe['"+k+"'][" + owner._form.hwnd + "]",v?true:null)
			owner._commands[k] = v;
		}
	};
	
 	send = function( hwnd,method,... ){  
 		var t = type(hwnd); 
		if( t == "string" ){
			var realName = hwnd;
			var sendTable = {realName;method;...};
			var subscribe = commandTable.getByNamespace("subscribe['"+realName+"']");
			
			var ret;
			for(hwnd in subscribe){
				var id = commandTable.push(sendTable); 
				ret = ::SendMessageInt(hwnd,0x4CC/*_WM_THREAD_COMMAND*/,id,0);
			} 
			return ret;
		}
		elseif(t == "number" ){
			var sendTable = {method;...}; 
			var id = commandTable.push( sendTable ); 
			return ::SendMessageInt( hwnd,0x4CC/*_WM_THREAD_COMMAND*/,id,0);
		}; 
	};
	
	post = function( hwnd,method,... ){  
 		var t = type(hwnd); 
		if( t == "string" ){
			var realName = hwnd;
			var sendTable = {realName;method;...};
			var subscribe = commandTable.getByNamespace("subscribe['"+realName+"']");
			
			var ret;
			for(hwnd in subscribe){
				var id = commandTable.push(sendTable); 
				if( !::PostMessage(hwnd,0x4CC/*_WM_THREAD_COMMAND*/,id,0) ){
					commandTable.set(id,null); //避免有进无出
				}
			} 
		}
		elseif(t == "number" ){
			var sendTable = {method;...}; 
			var id = commandTable.push( sendTable ); 
			if(! ::PostMessage( hwnd,0x4CC/*_WM_THREAD_COMMAND*/,id,0) ){
				//超过消息队列上限(10,000),此函数返回0表示丢失消息发送失败
				commandTable.set(id,null); //避免有进无出
				return false;
			}
			return true;
		}; 
	};
	 
	
	var tickIdle = 0;
	var time_tick = ..time.tick;
	sendIdle = function(delay,...){
		var tick = time_tick();
		if( tick - tickIdle > delay ){
			tickIdle = tick
			return send(...);
		}
	};
	
	postIdle = function(delay,...){
		var tick = time_tick();
		if( tick - tickIdle > delay ){
			tickIdle = tick
			return post(...);
		}
	};

	receive = function( methodTable,wParam ){ 
		var args = commandTable.get(wParam) 
		commandTable.set(wParam,null); 
		var method = methodTable[ args[1] ]
		var tm = type(method); 
		var _,argc = ..table.range(args); 
		if( tm =="function" ){ 
			return invoke(method,methodTable, ..table.unpack( args,2,argc) )	
		}
		elseif( tm == "table" ){
			var ret;
			for(i=1;#method){
				 ret = invoke(method[i],methodTable, ..table.unpack( args,2,argc) )
			}
			return tonumber(ret);
		}
	};
	
	self.invoke = function( id,f,... ){
		..raw.closehandle( ..thread.create(
			function(id,f,...){ 
				import thread.command; 
				thread.command.post(id,f(...) ) 
			},id,f,...) );   
	}
	
	instance = function(){
		if( ! self[["_instance"]] ){
			self[["_instance"]] =  ..thread.command(); 
		}
		return self[["_instance"]];
	}
	
	
	self@ = {
		_get = function(k){
			return function(...){
				return owner.send(k,...);
			} 
		} 
	}
}

/**intellisense()
thread.command.post(.(窗口句柄,"命令函数名",其他参数) = 不阻塞调用跨线程命令,\n参数@1指定句柄时,超过消息队列限制发送失败返回false,否则返回true
thread.command.post(.("命令函数名",其他参数) = 不阻塞调用跨线程命令,不接收返回值\n不指定窗口句柄,所有同名的线程命令函数都会被调用\n函数无返回值
thread.command.send(.(窗口句柄,"命令函数名",其他参数) = 阻塞调用跨线程命令,\n注意send函数发送的消息有可能比之前post函数发送的消息更早被接收\n可获取回调函数的返回数值,默认返回0
thread.command.send(.("命令函数名",其他参数) = 阻塞调用跨线程命令,\n注意send函数发送的消息有可能比之前post函数发送的消息更早被接收\n不指定窗口句柄,所有同名的线程命令函数都会被调用,\n可获取最后一次处理该命令的回调函数返回数值,默认返回0
thread.command.sendIdle(.(延时值,窗口句柄,"命令函数名",其他参数) = 在指定的延时值内忽略部份消息\n其他同send函数
thread.command.sendIdle(.(延时值,"命令函数名",其他参数) = 在指定的延时值内忽略部份消息\n其他同send函数
thread.command.postIdle(.(延时值,窗口句柄,"命令函数名",其他参数) = 在指定的延时值内忽略部份消息\n其他同post函数
thread.command.postIdle(.(延时值,"命令函数名",其他参数) = 在指定的延时值内忽略部份消息\n其他同post函数
thread.command.命令函数名() = 使用函数名作为第一个参数调用send发送命令令\n第一个参数可以指定目标窗口句柄\n如果不指定窗口句柄,则所有同名的线程命令函数都会被调用,\n被调用函数可返回数值并中止命令继续传递
thread.command(.(窗口对象) = 创建线程命令订阅对象\n省略参数则创建 message only window,\n该对象定义的成员函数,都可在其他线程中用 thread.command.post()调用
thread.command() = !thread_command.
thread.command.instance() = 全局单实例线程命令订阅对象\n!thread_command.
!thread_command.订阅命令名字 = @.订阅命令名字 = function( ... ){
	_/*支持不定个数参数\n如果同一个名字要注册多个回调函数请使用subscribe()函数\n返回数值可阻止命令继续传递*/
}
!thread_command.subscribe(  = 订阅指定的命令
!thread_command.subscribe(.("订阅命令名字",回调函数对象) = 同一个名字可以多此调用此函数添加多个不同的关注回调函数\n回调函数如果返回值可阻止命令继续传递
!thread_command.unsubscribe( = 取消订阅指定的命令
!thread_command.unsubscribe(.("订阅命令名字",回调函数对象) = 函数无返回值
 thread.command.invoke("命令名",线程函数,调用参数) = @.invoke(  \n	"__/*创建线程\n使用线程函数的返回值作为参数触发该命令*/" ,function( ... ){\n		\n	}, \n)
!thread_command._form = 窗体对象\n!winform.
_WM_THREAD_COMMAND=@0x4CC/*_WM_THREAD_COMMAND*/
end intellisense**/