//自定义 behavior
import win.ui;
/*DSG{{*/
winform = ..win.form(text="HTMLayout behavior用法演示";right=599;bottom=399;parent=...)
winform.add(
layoutWindow={cls="edit";left=10;top=12;right=580;bottom=382;db=1;dl=1;dr=1;dt=1;multiline=1;notify=1;z=1}
)
/*}}*/

import web.layout;
wbLayout = web.layout(winform.layoutWindow);
 
/* 
添加behavior非常简单
只要在 web.layout.behavior 名字空间下添加库并导入当前程序,或直接添加新的名字空间都可以创建behavior 

所有HTMLayout窗体可用的事件(函数名前缀为on.... )在 behavior 中都可以使用
当然, 仅在CSS样式中指定了 behavior 的节点才可以触发对应的事件
仅需定义需要用到的事件即可

如果CSS中behavior名字包含横线， 导入AAuto名字空间时自动修改为驼峰式命名，
例如 my-behavior 需要导入名字空间 web.layout.behavior.myBehavior

behavior也可以使用名字空间，
CSS的behaivor属性中的名字空间必须包含在引号中，例如  behaivor:"button.command"
该behavior对应 aauto中的 web.layout.behavior.button.command 名字空间。
*/  
namespace web.layout.behavior.button.command{  
	
 	/*
 	ltEle 参数是绑定behavior的节点，
 	实际上也就是指定了 behavior:command 的节点对象
 	
 	ltTarget 通常指的是实际触发事件的节点，
 	或者根据不同的事件，ltTarget的意义有所不同
 	
 	如果最后一个参数是behaviorParams，可以使用下面的语句得到 behaviorParams.he 
 	var ltSource = ..web.layout.element( behaviorParams.he )
 	ltSource在onMenuItemClick 事件中表示弹出菜单的源节点
 	*/
 	onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) { 
		ltEle.printf("点击了按钮")
	}
	 
	
	//所有名字不是on前缀的函数,都可以在CSS脚本中直接调用,
	//在CSSS!调用下面的函数时,第一个实参是下面的第二个形参,第一个ltEle参数则是绑定behavior的节点对象
	func = function(ltEle,a,b,c){  
		ltEle.printf("调用了自定义函数，收到参数 a:%d b:%d c:%d ",a,b,c )
		return "返回新的值"
	}
}

wbLayout.html =/***
<div id="my-button" 属性="值">请点击这里</div> 
***/

wbLayout.css = /**
#my-button{ 
	/*
	behavior名字前加波浪线表示在原来的behavior列表上追加，而不是替换behavior属性。
	可以找定多个behavior,以空格分格，例如下面的 clickable 是一个内建behavior，表示触发 onButtonClick事件而不是 onMouseClick事件。
	
	导入aauto名字空间时,behavior名字必须放到url参数中,
	*/
	behavior:"button.command clickable";
	active-on!:
		self.func(1,2,3), //CSS脚本以逗号分隔语句
	; 
}
**/
 
winform.show() 
win.loopMessage(); 

